# Welcome to RBQL: SQL with Python expressions.
# To use RBQL with JavaScript expressions see instructions at the bottom.

# "a1", "a2", etc are column names.
# You can use them in Python expressions, e.g. "int(a1) * 20 + len(a2) * random.randint(1, 10)"
# To run the query press F5.
# For more info visit https://github.com/mechatroner/rainbow_csv


# modify:
###SELECT_PLACEHOLDER###

# To join with another table, modify this:
#join /path/to/another/table.tsv on a2 == b1

# To filter result set, modify this:
#where len(a1) > 10

# To sort result set, modify this:
#order by a2 desc



# Examples of RBQL queries:
# select * where a1 == "SELL"
# update set a3 = 'United States' where a3.find('of America') != -1
# select * where a3 in ["car", "plane", "boat"] and int(a1) >= 100
# select a4, a1
# select * order by int(a2) desc
# select * order by random.random()
# select NR, * where NR <= 100
# select * where re.match(".*ab.*", a1) is not None
# select distinct a1, *, 200, int(a2) + 5, "hello world" where NR > 100 and int(a5) < -7 order by a3 ASC
# select distinct count len(a1) where a2 != 'US'
# select a1, b1, b2 inner join ./countries.txt on a2 == b1 order by a1, a3

# Next time you can run another query by entering it into vim command line starting with ":Select" command.



# =======================================================================================
# Instructions for JavaScript:
# 1. Ensure you have Node.js installed
# 2. Add "let g:rbql_backend_language = ''js''" to your .vimrc
# 3. Execute ":let g:rbql_backend_language = ''js''"
# 4. Exit this buffer and run F5 again
